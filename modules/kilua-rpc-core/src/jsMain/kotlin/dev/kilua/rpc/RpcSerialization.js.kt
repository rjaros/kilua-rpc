/*
 * Copyright (c) 2024 Robert Jaros
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package dev.kilua.rpc

import kotlinx.serialization.SerializationStrategy
import kotlinx.serialization.json.Json
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.modules.overwriteWith

/**
 * JSON utility functions
 */
public actual object RpcSerialization {

    /**
     * Default Json configuration for the fullstack interfaces.
     */
    public actual val plain: Json = Json {
        ignoreUnknownKeys = true
        serializersModule = SerializersModule {
            contextual(Result::class) { args -> ResultSerializer(args[0]) }
        }
    }

    /**
     * @suppress internal variable
     * Internal serializers module for custom exceptions (generated by the Kilua RPC gradle plugin).
     */
    public actual var exceptionsSerializersModule: SerializersModule? = null

    /**
     * Custom JSON configuration for the fullstack interfaces.
     */
    public actual var customConfiguration: Json? = null

    /**
     * An extension function to convert Serializable object to JS dynamic object
     * @param serializer a serializer for T
     */
    public fun <T> T.toObj(serializer: SerializationStrategy<T>): dynamic {
        return JSON.parse(getJson().encodeToString(serializer, this))
    }

    /**
     * Return customized Json configuration or default if not customized.
     */
    public actual fun getJson(serializersModules: List<SerializersModule>?): Json {
        return getCustomJson(serializersModules) ?: plain
    }

    /**
     * Return customized Json configuration or null if not customized.
     */
    public actual fun getCustomJson(serializersModules: List<SerializersModule>?): Json? {
        return if (exceptionsSerializersModule == null && customConfiguration == null && serializersModules == null) {
            null
        } else {
            Json(from = (customConfiguration ?: Json.Default)) {
                ignoreUnknownKeys = true
                serializersModule = serializersModule.overwriteWith(SerializersModule {
                    contextual(Result::class) { args -> ResultSerializer(args[0]) }
                    exceptionsSerializersModule?.let { this.include(it) }
                    serializersModules?.forEach {
                        this.include(it)
                    }
                })
            }
        }
    }
}
